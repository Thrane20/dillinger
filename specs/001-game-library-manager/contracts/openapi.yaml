openapi: 3.0.3
info:
  title: Dillinger Game Library API
  description: RESTful API for managing and launching games across multiple platforms
  version: 1.0.0
  contact:
    name: Dillinger Game Library
    url: https://github.com/your-username/dillinger
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://api.dillinger.local/api
    description: Local production server

paths:
  # Health and system endpoints
  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"

  # Game management endpoints
  /games:
    get:
      summary: List games in library with filtering and pagination
      tags: [Games]
      parameters:
        - name: search
          in: query
          description: Search games by title (case-insensitive)
          schema:
            type: string
            maxLength: 100
        - name: platform
          in: query
          description: Filter by platform ID
          schema:
            type: string
            format: uuid
        - name: genre
          in: query
          description: Filter by genre
          schema:
            type: string
            maxLength: 50
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
        - name: favorite
          in: query
          description: Show only favorites
          schema:
            type: boolean
        - name: collection
          in: query
          description: Filter by collection ID
          schema:
            type: string
            format: uuid
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum: [title, lastPlayed, playCount, rating, createdAt]
            default: lastPlayed
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: limit
          in: query
          description: Number of games to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of games to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Games retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    type: array
                    items:
                      $ref: '#/components/schemas/Game'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'

    post:
      summary: Add new game to library
      tags: [Games]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameRequest'
      responses:
        '201':
          description: Game added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid game data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Game already exists at this file path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{gameId}:
    get:
      summary: Get detailed game information
      tags: [Games]
      parameters:
        - name: gameId
          in: path
          required: true
          description: Game UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Game details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameDetails'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update game metadata
      tags: [Games]
      parameters:
        - name: gameId
          in: path
          required: true
          description: Game UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGameRequest'
      responses:
        '200':
          description: Game updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid update data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Remove game from library
      tags: [Games]
      parameters:
        - name: gameId
          in: path
          required: true
          description: Game UUID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Game removed successfully
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cannot delete game with active session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{gameId}/launch:
    post:
      summary: Launch game session
      tags: [Games, Sessions]
      parameters:
        - name: gameId
          in: path
          required: true
          description: Game UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                displayResolution:
                  type: string
                  enum: ["800x600", "1024x768", "1280x720", "1920x1080"]
                  default: "1280x720"
                  description: VNC display resolution
                audioEnabled:
                  type: boolean
                  default: true
                  description: Enable audio forwarding
      responses:
        '201':
          description: Game session started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameSession'
        '400':
          description: Cannot launch game (already running, file not found, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Game session management
  /sessions:
    get:
      summary: List active and recent game sessions
      tags: [Sessions]
      parameters:
        - name: status
          in: query
          description: Filter by session status
          schema:
            type: string
            enum: [starting, running, paused, stopping, completed, failed, timeout]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/GameSessionDetails'

  /sessions/{sessionId}:
    get:
      summary: Get session details and status
      tags: [Sessions]
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Session UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameSessionDetails'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Stop game session
      tags: [Sessions]
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Session UUID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session stopped successfully
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Session cannot be stopped (already stopping/stopped)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}/stream:
    get:
      summary: Get VNC streaming connection details
      tags: [Sessions]
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Session UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: VNC connection details
          content:
            application/json:
              schema:
                type: object
                properties:
                  vncUrl:
                    type: string
                    format: uri
                    description: WebSocket URL for VNC connection
                    example: "ws://localhost:6080/websockify"
                  password:
                    type: string
                    description: VNC session password
                  displayPort:
                    type: integer
                    description: VNC display port
                    example: 5900
                  resolution:
                    type: string
                    description: Display resolution
                    example: "1280x720"
                  status:
                    type: string
                    enum: [starting, ready, error]
                    description: Stream readiness status
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Session not running or stream not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Platform management
  /platforms:
    get:
      summary: List available gaming platforms
      tags: [Platforms]
      parameters:
        - name: type
          in: query
          description: Filter by platform type
          schema:
            type: string
            enum: [native, wine, emulator]
        - name: active
          in: query
          description: Filter by active status
          schema:
            type: boolean
      responses:
        '200':
          description: Platforms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  platforms:
                    type: array
                    items:
                      $ref: '#/components/schemas/Platform'

  /platforms/{platformId}:
    get:
      summary: Get platform details
      tags: [Platforms]
      parameters:
        - name: platformId
          in: path
          required: true
          description: Platform UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Platform details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformDetails'
        '404':
          description: Platform not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Collection management
  /collections:
    get:
      summary: List game collections
      tags: [Collections]
      responses:
        '200':
          description: Collections retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Collection'

    post:
      summary: Create new collection
      tags: [Collections]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Invalid collection data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Collection name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /collections/{collectionId}:
    get:
      summary: Get collection with games
      tags: [Collections]
      parameters:
        - name: collectionId
          in: path
          required: true
          description: Collection UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDetails'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update collection metadata
      tags: [Collections]
      parameters:
        - name: collectionId
          in: path
          required: true
          description: Collection UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCollectionRequest'
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete collection
      tags: [Collections]
      parameters:
        - name: collectionId
          in: path
          required: true
          description: Collection UUID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Collection deleted successfully
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cannot delete default collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /collections/{collectionId}/games:
    put:
      summary: Update games in collection
      tags: [Collections]
      parameters:
        - name: collectionId
          in: path
          required: true
          description: Collection UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gameIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Complete list of game IDs for this collection
                  maxItems: 1000
      responses:
        '200':
          description: Collection games updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDetails'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid game IDs provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Metadata management
  /metadata/search:
    get:
      summary: Search external game metadata sources
      tags: [Metadata]
      parameters:
        - name: title
          in: query
          required: true
          description: Game title to search
          schema:
            type: string
            minLength: 1
            maxLength: 200
        - name: platform
          in: query
          description: Platform filter for search
          schema:
            type: string
            maxLength: 50
        - name: year
          in: query
          description: Release year filter
          schema:
            type: integer
            minimum: 1970
            maximum: 2030
        - name: limit
          in: query
          description: Maximum results to return
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 10
      responses:
        '200':
          description: Metadata search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/GameMetadata'
                  total:
                    type: integer
                    description: Total results available
                  source:
                    type: string
                    description: Metadata source (e.g., "igdb")
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded for metadata API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{gameId}/metadata:
    post:
      summary: Apply external metadata to game
      tags: [Games, Metadata]
      parameters:
        - name: gameId
          in: path
          required: true
          description: Game UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                igdbId:
                  type: integer
                  description: IGDB game ID to apply
                overwrite:
                  type: boolean
                  default: false
                  description: Whether to overwrite existing metadata
      responses:
        '200':
          description: Metadata applied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid metadata ID or application failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    # Core entities
    Game:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        genre:
          type: string
          maxLength: 50
        developer:
          type: string
          maxLength: 100
        publisher:
          type: string
          maxLength: 100
        releaseDate:
          type: string
          format: date
        platformId:
          type: string
          format: uuid
        filePath:
          type: string
        fileType:
          type: string
          enum: [executable, rom, installer, archive]
        igdbId:
          type: integer
        coverArtUrl:
          type: string
          format: uri
        screenshotUrls:
          type: array
          items:
            type: string
            format: uri
          maxItems: 10
        tags:
          type: array
          items:
            type: string
            maxLength: 30
          maxItems: 20
        isFavorite:
          type: boolean
        rating:
          type: integer
          minimum: 1
          maximum: 5
        notes:
          type: string
          maxLength: 1000
        lastPlayed:
          type: string
          format: date-time
        playCount:
          type: integer
          minimum: 0
        totalPlayTime:
          type: integer
          minimum: 0
          description: Total play time in milliseconds
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, title, platformId, filePath, fileType, tags, isFavorite, playCount, totalPlayTime, createdAt, updatedAt]

    GameDetails:
      allOf:
        - $ref: '#/components/schemas/Game'
        - type: object
          properties:
            platform:
              $ref: '#/components/schemas/Platform'
            collections:
              type: array
              items:
                $ref: '#/components/schemas/Collection'
            activeSessions:
              type: array
              items:
                $ref: '#/components/schemas/GameSession'
            recentSessions:
              type: array
              items:
                $ref: '#/components/schemas/GameSession'
              maxItems: 5

    CreateGameRequest:
      type: object
      required: [title, filePath, platformId]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        filePath:
          type: string
          description: Absolute path to game file
        platformId:
          type: string
          format: uuid
        description:
          type: string
          maxLength: 2000
        genre:
          type: string
          maxLength: 50
        developer:
          type: string
          maxLength: 100
        publisher:
          type: string
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            maxLength: 30
          maxItems: 20
        autoScrapeMetadata:
          type: boolean
          default: true
          description: Whether to automatically fetch metadata from external sources

    UpdateGameRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        genre:
          type: string
          maxLength: 50
        developer:
          type: string
          maxLength: 100
        publisher:
          type: string
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            maxLength: 30
          maxItems: 20
        isFavorite:
          type: boolean
        rating:
          type: integer
          minimum: 1
          maximum: 5
        notes:
          type: string
          maxLength: 1000

    GameSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
        gameId:
          type: string
          format: uuid
        containerId:
          type: string
        containerName:
          type: string
        displayPort:
          type: integer
        status:
          type: string
          enum: [starting, running, paused, stopping, completed, failed, timeout]
        startedAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
        lastActivity:
          type: string
          format: date-time
        launchDuration:
          type: integer
          description: Milliseconds from start to running
        errorMessage:
          type: string
        errorCode:
          type: string
        retryCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
      required: [id, gameId, containerName, status, startedAt, retryCount, createdAt]

    GameSessionDetails:
      allOf:
        - $ref: '#/components/schemas/GameSession'
        - type: object
          properties:
            game:
              $ref: '#/components/schemas/Game'

    Platform:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
        type:
          type: string
          enum: [native, wine, emulator]
        dockerImage:
          type: string
          maxLength: 200
        baseCommand:
          type: string
          maxLength: 500
        supportedExtensions:
          type: array
          items:
            type: string
            maxLength: 10
        icon:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 500
        color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
        sortOrder:
          type: integer
        isActive:
          type: boolean
        isDefault:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, name, type, dockerImage, baseCommand, supportedExtensions, icon, description, sortOrder, isActive, isDefault, createdAt, updatedAt]

    PlatformDetails:
      allOf:
        - $ref: '#/components/schemas/Platform'
        - type: object
          properties:
            gameCount:
              type: integer
              minimum: 0
              description: Number of games using this platform

    Collection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        coverGameId:
          type: string
          format: uuid
        color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
        icon:
          type: string
          maxLength: 50
        sortOrder:
          type: integer
        isPublic:
          type: boolean
        isDefault:
          type: boolean
        gameCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, name, sortOrder, isPublic, isDefault, gameCount, createdAt, updatedAt]

    CollectionDetails:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            games:
              type: array
              items:
                $ref: '#/components/schemas/Game'

    CreateCollectionRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
        icon:
          type: string
          maxLength: 50

    UpdateCollectionRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
        icon:
          type: string
          maxLength: 50

    GameMetadata:
      type: object
      properties:
        igdbId:
          type: integer
        title:
          type: string
        description:
          type: string
        genre:
          type: string
        developer:
          type: string
        publisher:
          type: string
        releaseDate:
          type: string
          format: date
        coverArtUrl:
          type: string
          format: uri
        screenshotUrls:
          type: array
          items:
            type: string
            format: uri
        platforms:
          type: array
          items:
            type: string
          description: Available platforms for this game
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence score for metadata match
      required: [title]

    # Utility schemas
    PaginationInfo:
      type: object
      properties:
        total:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 1
        offset:
          type: integer
          minimum: 0
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean
      required: [total, limit, offset, hasNext, hasPrevious]

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type/code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
      required: [error, message, timestamp]

  securitySchemes:
    # Future: JWT authentication for multi-user support
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authenticated requests (future feature)

# Future: Security will be added when multi-user support is implemented
# security:
#   - bearerAuth: []

tags:
  - name: System
    description: System health and status endpoints
  - name: Games
    description: Game library management
  - name: Sessions
    description: Game session lifecycle and streaming
  - name: Platforms
    description: Gaming platform configuration
  - name: Collections
    description: Game organization and collections
  - name: Metadata
    description: External game metadata integration